Arm Assembly Cortex M4


Ordlista:
adress = Alla platser i en dators minne har en viss adress där man sparar data
byte = 8 bitar (rymmer en bokstav (ascii kodad) eller 2 hexadecimala tal)
register = Processorns egna lådor att stoppa data i
label = Namn för att beskriva en adress i minnet. T.ex. namnet på en subrutin
.align 4 = Sätt PC (programräknaren) på minnesadress som är jämnt delbar med 4
.thumb = Säger åt processorn att programmet ska köras i thumb läge
.global <label> = Säger åt kompilatorn vart programmet startar
word = 32 bitar eller 4 bytes
halfword = 16 bitar eller 2 bytes

Strängar (.string), fields (.field) och bytes (.byte) är olika typer av instruktioner
som man kan använda sig av för att spara data. .string sparar strängar och namnet som
man ger stränen pekar på första bokstaven i strängen. Datan kommer med dessa kommandon att
hamna i processorns flashminne.

Värden som ligger i .field kan man ladda in med ldr. Namnet som man ger .fielden t.ex.
buffer innehåller adressen där värdet finns lagrat. Det verkar inte som man kan använda
adr för att lägga hela adressen från en .field i ett register (adressen består av för
många bitar?). Kan man göra mov r0, #(buffer & 0xffff)
movt r0, #(buffer >> 16) för att lägga adressen till .fileden i ett register?


Använda instruktionen ldr:
När man ska ladda in ett värde eller sträng som ligger utanför processorns flashminne
(adresser > 0x0003 FFFF) så måste man använda sig utav instruktionen ldr (load). Ldr har
följande syntax:

ldr <destinations_register>, adress


Använda instruktion mov:
Mov används när man ska kopiera värden mellan register. Man kan endast använda mov
på register i processorns flashminne. Man kan endast flytta på 16 bitar i taget med
instruktionen mov. För att flytta 32 bitar måste man göra följande:

mov r0, #(<värdet> & 0xffff)
movt r0, #(<värdet> >> 16)

Strängar:
När man skapar en sträng är det viktigt att man skapar den när PC:n (programräknaren)
ligger på en adress jämt delbar med 4. Däför kan man med fördel skriva .align 4 innan
man skapar strängen med följande instruktion:

<namn_på_sträng> .string "Vacker väder"

Namnet på strängen kommer att vara en konstant som pekar på den första bokstaven i
strängen (första byten). För att ladda in en sträng i sitt program skriver man följande:

ldr <destinations_register> <namn_på_sträng>

Nu pekar destinations_registret på strängen och vi kan börja arbeta med den. Om man
vill stega bokstav för bokstav i en sträng så gör man på följande sätt:

r0 = registret där bokstaven ska hamna
r4 = pekar på strängen
ldrb = ladda in en byte (en bokstav eftersom en bokstav tar upp 8 bitar = 1 byte)

ldrb r0, [r4]

Om man sedan vill att r4 ska peka på nästa bokstav i strängen lägger man till
#1 alltså:

ldrb r0, [r4], #1
