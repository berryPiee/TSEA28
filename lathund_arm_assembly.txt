Arm Assembly Cortex M4


Ordlista:
adress = Alla platser i en dators minne har en viss adress där man sparar data
byte = 8 bitar (rymmer en bokstav (ascii kodad) eller 2 hexadecimala tal)
register = Processorns egna lådor att stoppa data i
label = Namn för att beskriva en adress i minnet. T.ex. namnet på en subrutin
.align 4 = Sätt PC (programräknaren) på minnesadress som är jämnt delbar med 4
.thumb = Säger åt processorn att programmet ska köras i thumb läge
.global <label> = Säger åt kompilatorn vart programmet startar


Använda instruktionen ldr:
När man ska ladda in ett värde, en sträng eller bytes som ligger utanför processorns flashminne
(adresser > 0x0003 FFFF) så måste man använda sig utav instruktionen ldr (load). Ldr har
följande syntax:

ldr <destinations_register>, adress


Använda instruktion mov:
Mov används när man ska kopiera värden mellan register. Man kan endast använda mov
på register i processorns flashminne.

Strängar:
När man skapar en sträng är det viktigt att man skapar den när PC:n (programräknaren)
ligger på en adress jämt delbar med 4. Däför kan man med fördel skriva .align 4 innan
man skapar strängen med följande instruktion:

<namn_på_sträng> .string "Vacker väder"

Namnet på strängen kommer att vara en konstant som pekar på den första bokstaven i
strängen (första byten). För att ladda in en sträng i sitt program skriver man följande:

ldr <destinations_register> <namn_på_sträng>

Nu pekar destinations_registret på strängen och vi kan börja arbeta med den. Om man
vill stega bokstav för bokstav i en sträng så gör man på följande sätt:

r0 = registret där bokstaven ska hamna
r4 = pekar på strängen
ldrb = ladda in en byte (en bokstav eftersom en bokstav tar upp 8 bitar = 1 byte)

ldrb r0, [r4]

Om man sedan vill att r4 ska peka på nästa bokstav i strängen lägger man till
#1 alltså:

ldrb r0, [r4], #1
